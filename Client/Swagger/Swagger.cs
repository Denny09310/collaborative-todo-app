
//----------------------
// <auto-generated>
//     Generated REST API Client Code Generator v1.30.0.0 on 05/09/2025 17:13:33
//     Using the tool Refitter v1.6.1
// </auto-generated>
//----------------------



using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading;
using System.Threading.Tasks;

#nullable enable annotations

namespace Client.Services
{
    /// <summary>Server</summary>
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.6.1.0")]
    public partial interface IApiClient : IDisposable
    {
        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>Success</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json", "Content-Type: application/json")]
        [Post("/api/authentication/login")]
        Task<IApiResponse<TokenResponse>> Login([Body, AliasAs("Request")] Request request, CancellationToken cancellationToken = default);

        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>204</term>
        /// <description>No Content</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/problem+json")]
        [Post("/api/authentication/logout")]
        Task<IApiResponse> Logout(CancellationToken cancellationToken = default);

        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>204</term>
        /// <description>No Content</description>
        /// </item>
        /// <item>
        /// <term>409</term>
        /// <description>A server side error occurred.</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/problem+json", "Content-Type: application/json")]
        [Post("/api/authentication/register")]
        Task<IApiResponse> Register([Body, AliasAs("Request")] Request2 request, CancellationToken cancellationToken = default);

        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>204</term>
        /// <description>No Content</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/problem+json", "Content-Type: application/json")]
        [Post("/api/items/complete")]
        Task<IApiResponse> CompleteItem([Body, AliasAs("Request")] Request3 request, CancellationToken cancellationToken = default);

        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>201</term>
        /// <description>Created</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json", "Content-Type: application/json")]
        [Post("/api/items/create")]
        Task<IApiResponse<Response>> CreateItem([Body, AliasAs("Request")] Request4 request, CancellationToken cancellationToken = default);

        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>201</term>
        /// <description>Created</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json", "Content-Type: application/json")]
        [Post("/api/projects/create")]
        Task<IApiResponse<Response2>> CreateProject([Body, AliasAs("Request")] Request5 request, CancellationToken cancellationToken = default);

        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>Success</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// <item>
        /// <term>403</term>
        /// <description>Forbidden</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json")]
        [Get("/api/projects")]
        Task<IApiResponse<Response3>> GetProjects(CancellationToken cancellationToken = default);

        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>Success</description>
        /// </item>
        /// <item>
        /// <term>401</term>
        /// <description>Unauthorized</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json")]
        [Get("/api/users/info")]
        Task<IApiResponse<Response4>> GetUserInfo(CancellationToken cancellationToken = default);

        /// <returns>
        /// A <see cref="Task"/> representing the <see cref="IApiResponse"/> instance containing the result:
        /// <list type="table">
        /// <listheader>
        /// <term>Status</term>
        /// <description>Description</description>
        /// </listheader>
        /// <item>
        /// <term>200</term>
        /// <description>Success</description>
        /// </item>
        /// <item>
        /// <term>400</term>
        /// <description>Bad Request</description>
        /// </item>
        /// </list>
        /// </returns>
        [Headers("Accept: application/json, application/problem+json", "Content-Type: application/json")]
        [Post("/api/authentication/refresh-token")]
        Task<IApiResponse<TokenResponse>> RefreshToken([Body, AliasAs("TokenRequest")] TokenRequest tokenRequest, CancellationToken cancellationToken = default);


    }

}

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Client.Services
{
    using System = global::System;

    

    /// <summary>
    /// base dto for access/refresh token responses
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TokenResponse : TokenRequest
    {
        /// <summary>
        /// the jwt access token which will be valid for the duration specified by AccessExpiry
        /// </summary>

        [JsonPropertyName("AccessToken")]
        public string AccessToken { get; set; }

    }

    /// <summary>
    /// base dto for access/refresh token renewal requests
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class TokenRequest
    {
        /// <summary>
        /// unique identifier of a user
        /// </summary>

        [JsonPropertyName("UserId")]
        public string UserId { get; set; }

        /// <summary>
        /// a single-use refresh token which will be valid for the duration specified by RefreshExpiry
        /// </summary>

        [JsonPropertyName("RefreshToken")]
        public string RefreshToken { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Request
    {

        [JsonPropertyName("Email")]
        public string Email { get; set; }

        [JsonPropertyName("Password")]
        public string Password { get; set; }

    }

    /// <summary>
    /// RFC7807 compatible problem details/ error response class. this can be used by configuring startup like so:
    /// <br/>app.UseFastEndpoints(c =&gt; c.Errors.UseProblemDetails())
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ProblemDetails
    {

        [JsonPropertyName("Type")]
        public string Type { get; set; } = "https://www.rfc-editor.org/rfc/rfc7231#section-6.5.1";

        [JsonPropertyName("Title")]
        public string Title { get; set; } = "One or more validation errors occurred.";

        [JsonPropertyName("Status")]
        public int? Status { get; set; } = 400;

        [JsonPropertyName("Instance")]
        public string Instance { get; set; } = "/api/route";

        [JsonPropertyName("TraceId")]
        public string TraceId { get; set; } = "0HMPNHL0JHL76:00000001";

        /// <summary>
        /// the details of the error
        /// </summary>

        [JsonPropertyName("Detail")]
        public string Detail { get; set; }

        [JsonPropertyName("Errors")]
        public ICollection<ProblemDetails_Error> Errors { get; set; }

    }

    /// <summary>
    /// the error details object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class ProblemDetails_Error
    {
        /// <summary>
        /// the name of the error or property of the dto that caused the error
        /// </summary>

        [JsonPropertyName("Name")]
        public string Name { get; set; } = "Error or field name";

        /// <summary>
        /// the reason for the error
        /// </summary>

        [JsonPropertyName("Reason")]
        public string Reason { get; set; } = "Error reason";

        /// <summary>
        /// the code of the error
        /// </summary>

        [JsonPropertyName("Code")]
        public string Code { get; set; }

        /// <summary>
        /// the severity of the error
        /// </summary>

        [JsonPropertyName("Severity")]
        public string Severity { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Request2
    {

        [JsonPropertyName("Email")]
        public string Email { get; set; }

        [JsonPropertyName("Username")]
        public string Username { get; set; }

        [JsonPropertyName("Password")]
        public string Password { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Request3
    {

        [JsonPropertyName("ItemId")]
        public string ItemId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response
    {

        [JsonPropertyName("Id")]
        public string Id { get; set; }

        [JsonPropertyName("Title")]
        public string Title { get; set; }

        [JsonPropertyName("IsCompleted")]
        public bool? IsCompleted { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Request4
    {

        [JsonPropertyName("ProjectId")]
        public string ProjectId { get; set; }

        [JsonPropertyName("Title")]
        public string Title { get; set; }

        [JsonPropertyName("Description")]
        public string Description { get; set; }

        [JsonPropertyName("DueDate")]
        public System.DateTime? DueDate { get; set; }

        [JsonPropertyName("Priority")]
        public int? Priority { get; set; }

        [JsonPropertyName("AssignedToId")]
        public string AssignedToId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response2
    {

        [JsonPropertyName("Id")]
        public string Id { get; set; }

        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Description")]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Request5
    {

        [JsonPropertyName("OwnerId")]
        public string OwnerId { get; set; }

        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Description")]
        public string Description { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response3
    {

        [JsonPropertyName("Projects")]
        public ICollection<Response_Project> Projects { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response_Project
    {

        [JsonPropertyName("Id")]
        public string Id { get; set; }

        [JsonPropertyName("Name")]
        public string Name { get; set; }

        [JsonPropertyName("Description")]
        public string Description { get; set; }

        [JsonPropertyName("Items")]
        public ICollection<Response_Item> Items { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response_Item
    {

        [JsonPropertyName("Id")]
        public string Id { get; set; }

        [JsonPropertyName("Title")]
        public string Title { get; set; }

        [JsonPropertyName("IsCompleted")]
        public bool? IsCompleted { get; set; }

        [JsonPropertyName("DueDate")]
        public System.DateTime? DueDate { get; set; }

        [JsonPropertyName("Priority")]
        public int? Priority { get; set; }

        [JsonPropertyName("AssignedToId")]
        public string AssignedToId { get; set; }

        [JsonPropertyName("AssignedToUsername")]
        public string AssignedToUsername { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.3.0))")]
    public partial class Response4
    {

        [JsonPropertyName("Id")]
        public string Id { get; set; }

        [JsonPropertyName("Email")]
        public string Email { get; set; }

        [JsonPropertyName("Username")]
        public string Username { get; set; }

        [JsonPropertyName("CreatedAt")]
        public System.DateTime? CreatedAt { get; set; }

        [JsonPropertyName("LastUpdatedAt")]
        public System.DateTime? LastUpdatedAt { get; set; }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625


#nullable enable
namespace Client.Services
{
    using System;
    using Microsoft.Extensions.DependencyInjection;
    using Refit;

    public static partial class IServiceCollectionExtensions
    {
        public static IServiceCollection ConfigureRefitClients(
            this IServiceCollection services, 
            Uri baseUrl, 
            Action<IHttpClientBuilder>? builder = default, 
            RefitSettings? settings = default)
        {
            var clientBuilderIApiClient = services
                .AddRefitClient<IApiClient>(settings)
                .ConfigureHttpClient(c => c.BaseAddress = baseUrl)
                .AddHttpMessageHandler<TokenHandler>();

            builder?.Invoke(clientBuilderIApiClient);

            return services;
        }
    }
}